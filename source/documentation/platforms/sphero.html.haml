---
title: Sphero with Gobot
author: The Hybrid Group
page_title: Platforms
page_subtitle: Gobot has a extensible system for connecting to hardware devices. The following robotics and physical computing platforms are currently supported.
page_title_docs: Sphero
page_subtitle_docs: "<a href='https://github.com/hybridgroup/gobot-sphero' target='blanck' class='repository'>Repository</a> <a class+'issues' href='https://github.com/hybridgroup/gobot-sphero/issues' target='blanck' >Issues</a>"
page_title_show: true
layout: documentation
subnav_platform: true
active_menu_platforms: true
subnavjs: true
---

%section.intro
  =image_tag "/images/devices/sphero.jpg", class: "display"
  .info-intro
    %h4 What is Sphero?
    %p
      Sphero is a sophisticated and programmable robot housed in a polycarbonate sphere shell.
    %p
      The gobot-sphero adaptor makes it easy to interact with Sphero using Go, once you have your Sphero setup and connected to your computer
      you can start writing code to make Sphero move, change direction, speed and colors, or detect Sphero events and execute some
      code when they occur.

    %h4 Where can I get a Sphero or find more info about it?
    %p
      You can do it by following 
      = link_to "this link.", "http://www.gosphero.com/", target: "_blank"

    %a{ :href => "http://godoc.org/github.com/hybridgroup/gobot/platforms/sphero#SpheroAdaptor", :class => "api-link", :target => "_blank"} API Reference
    
  .clear

%section.how-to#HowToInstall
  %h2 How To Install
  %p
    Installing Gobot with sphero support is pretty easy.
  :markdown
        :::bash
        go get github.com/hybridgroup/gobot && go install github.com/hybridgroup/platforms/sphero

%section.how-to#HowToUse
  %h2 How To Use
  %p Example of a simple program that makes the Sphero roll.

  :markdown
        :::go
        package main

        import (
            "fmt"
            "time"

            "github.com/hybridgroup/gobot"
            "github.com/hybridgroup/gobot/platforms/sphero"
        )

        func main() {
            gbot := gobot.NewGobot()

            adaptor := sphero.NewSpheroAdaptor("sphero", "/dev/rfcomm0")
            driver := sphero.NewSpheroDriver(adaptor, "sphero")

            work := func() {
                gobot.Every(3*time.Second, func() {
                    driver.Roll(30, uint16(gobot.Rand(360)))
                })
            }

            robot := gobot.NewRobot("sphero",
                []gobot.Connection{adaptor},
                []gobot.Device{driver},
                work,
            )

            gbot.AddRobot(robot)

            gbot.Start()
        }

%section.how-to#HowToConnect
  %h2 How To Connect
  %h3 OSX
  %p In order to allow Gobot running on your Mac to access the Sphero, go to "Bluetooth > Open Bluetooth Preferences > Sharing Setup" and make sure that "Bluetooth Sharing" is checked.
  :markdown
    Now you must pair with the Sphero. Open System Preferences > Bluetooth. Now with the Bluetooth devices windows open, smack the Sphero until it starts flashing three colors. You should see "Sphero-XXX" pop up as available devices where "XXX" is the first letter of the three colors the sphero is flashing. Pair with that device. Once paired your Sphero will be accessable through the serial device similarly named as `/dev/tty.Sphero-XXX-RN-SPP`

  %h3 Ubuntu
  %p Connecting to the Sphero from Ubuntu or any other Linux-based OS can be done entirely from the command line using Gort CLI commands. Here are the steps.
  %p Find the address of the Sphero, by using:
  :markdown
        :::bash
        gort scan bluetooth
  %p Pair to Sphero using this command (substituting the actual address of your Sphero):
  :markdown
        :::bash
        gort bluetooth pair <address>
  %p Connect to the Sphero using this command (substituting the actual address of your Sphero):
  :markdown
        :::bash
        gort bluetooth connect <address>
  %h3 Windows
  :markdown
    You should be able to pair your Sphero using your normal system tray applet for Bluetooth, and then connect to the COM port that is bound to the device, such as `COM3.`
  
%section.drivers#Drivers
  %h2 Drivers
  %p
    There is only one driver for the Sphero.

  .hardware
    .devices
      = partial "/partials/devices_for_platform", locals: { platform: "Sphero" }
