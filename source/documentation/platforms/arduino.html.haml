---
title: Arduino with Gobot
author: The Hybrid Group
page_title: Platforms
page_subtitle: Gobot has a extensible system for connecting to hardware devices. The following robotics and physical computing platforms are currently supported.
page_title_docs: Arduino
page_subtitle_docs: "<a href='https://github.com/hybridgroup/gobot-firmata' target='_blank' class='repository'>Repository</a> <a class+'issues' href='https://github.com/hybridgroup/gobot-firmata/issues' target='_blank'>Issues</a>"
page_title_show: true
layout: documentation
subnav_platform: true
active_menu_platforms: true
subnavjs: true
---

%section.intro
  = image_tag "/images/devices/arduino.jpg", class: "display"
  .info-intro
    %p
      Arduino is an open-source electronics prototyping platform based on flexible,
      easy-to-use hardware and software. It's intended for artists, designers, hobbyists and
      anyone interested in creating interactive objects or environments.

    %p 
      This package provides the adaptor for microcontrollers such as Arduino that support the 
      = link_to "Firmata", "http://firmata.org/wiki/Main_Page" , target: :blank
      protocol

    %p
      For more info about the arduino platform click
      = succeed "." do
        = link_to "here", "http://arduino.cc/", target: :blank

    %a{ :href => "http://godoc.org/github.com/hybridgroup/gobot/platforms/firmata#FirmataAdaptor", :class => "api-link", :target => "_blank"} API Reference

  .clear
  

%section.how-to#HowToInstall
  %h2 How To Install
  %p Installing Gobot with Arduino support is pretty easy.
  :markdown
        :::bash
        go get github.com/hybridgroup/gobot && go install github.com/hybridgroup/gobot/platforms/firmata

  %p 
    %b Note:
    Works with any Arduino or compatible that can run Firmata, which is a universal serial interface to microcontrollers.
        
%section.how-to#HowToUse
  %h2 How To Use
  %p This small program lets you turn on and off a LED every 1s. 
  :markdown
        :::go
        package main

        import (
            "time"

            "github.com/hybridgroup/gobot"
            "github.com/hybridgroup/gobot/platforms/firmata"
            "github.com/hybridgroup/gobot/platforms/gpio"
        )

        func main() {
            gbot := gobot.NewGobot()

            firmataAdaptor := firmata.NewFirmataAdaptor("arduino", "/dev/ttyACM0")
            led := gpio.NewLedDriver(firmataAdaptor, "led", "13")

            work := func() {
                gobot.Every(1*time.Second, func() {
                    led.Toggle()
                })
            }

            robot := gobot.NewRobot("bot",
                []gobot.Connection{firmataAdaptor},
                []gobot.Device{led},
                work,
            )

            gbot.AddRobot(robot)

            gbot.Start()
        }
  
  %h3 Hardware Support
  %p The following firmata devices have been tested and are currently supported:
  %ul 
    %li 
      = link_to "Arduino uno r3", "http://arduino.cc/en/Main/arduinoBoardUno", target: :blank  
    %li 
      = link_to "Teensy 3.0", "http://www.pjrc.com/store/teensy3.html", target: :blank  
  %p More devices are coming soon...

 
%section.drivers#Drivers
  %h2 Drivers
  %p
    Thanks to
    %b Gobot
    and
    %b Go
    it is possible to interact with several I/O hardware devices and interfaces connected to the arduino
    using a set of already defined and easy to use drivers, all of this thanks to the Gobot architecture, in conjuction with the gobot-firmata
    adaptor (using the firmata communication protocol),
    which makes it even possible to swap the entire platform for something else like digispark, and keep using the same code you just wrote for
    arduino, this just by swapping a couple of lines in your program.
  %p
    Available drivers for the arduino platform are listed below, the drivers contain detailed documentation and examples of what kind
    physical computing (using Gobot and Go) you could be doing:

  .hardware
    .devices
      = partial "/partials/devices_for_platform", locals: { platform: "Arduino" }
