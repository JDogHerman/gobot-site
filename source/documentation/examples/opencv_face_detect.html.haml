---
layout: documentation
page_title_show: true
title: "Gobot Example - opencv_face_detect"
page_title: "Example: opencv_face_detect"
author: The Hybrid Group
description: A Gobot code example
page_subtitle: "<a href='https://github.com/hybridgroup/gobot/tree/master/examples' target='_blank'>View In Repo</a>"
active_menu_docs: true
---
-content_for :js_accordeon do
  :javascript
    $("#example-panel").addClass("active-panel");
    $(".accordion-docs dt:nth-child(13) a:nth-child(2) img").addClass("rotate");

.example
  :markdown
        :::go
        package main

        import (
        	cv "github.com/hybridgroup/go-opencv/opencv"
        	"github.com/hybridgroup/gobot"
        	"github.com/hybridgroup/gobot/platforms/opencv"
        	"path"
        	"runtime"
        	"time"
        )

        func main() {
        	_, currentfile, _, _ := runtime.Caller(0)
        	cascade := path.Join(path.Dir(currentfile), "haarcascade_frontalface_alt.xml")

        	gbot := gobot.NewGobot()

        	window := opencv.NewWindowDriver("window")
        	camera := opencv.NewCameraDriver("camera", 0)

        	work := func() {
        		var image *cv.IplImage

        		gobot.On(camera.Events["Frame"], func(data interface{}) {
        			image = data.(*cv.IplImage)
        		})

        		gobot.Every(500*time.Millisecond, func() {
        			if image != nil {
        				i := image.Clone()
        				faces := opencv.DetectFaces(cascade, i)
        				i = opencv.DrawRectangles(i, faces, 0, 255, 0, 5)
        				window.ShowImage(i)
        			}

        		})
        	}

        	gbot.Robots = append(gbot.Robots,
        		gobot.NewRobot("faceBot", []gobot.Connection{}, []gobot.Device{window, camera}, work))

        	gbot.Start()
        }

