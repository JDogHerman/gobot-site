---
title: Gobot - Neurosky Mindwave Driver
author: The Hybrid Group
page_title: Drivers
page_subtitle: Cylon has a extensible system for connecting to hardware devices.
page_title_docs: Neurosky Mindwave
page_subtitle_docs: Driver
layout: documentation
page_title_show: true
subnav_driver: true
active_menu_docs: true
subnavjs: true

neurosky_platform: true
---
-content_for :js_accordeon do
  :javascript
    $("#driver-panel").addClass("active-panel");
    $("#others li:nth-child(2)").addClass("active-link");
    $(".accordion-docs dt:nth-child(9) a:nth-child(2) img").addClass("rotate");

%section.intro
  = image_tag "/images/devices/neurosky.jpg", class: "display"
  .info-intro
    %p
      The MindWave headset turns your computer into a brain activity monitor. The headset safely measures brainwave signals and monitors the attention levels of individuals as they interact with math, memory and pattern recognition applications. 
    
  .clear
  
%section.how_to#HowToConnect
  %h2 How To Connect
  :markdown
        :::go
        package main

        import (
          "fmt"
          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot/platforms/neurosky"
        )

        func main() {
          gbot := gobot.NewGobot()

          adaptor := neurosky.NewNeuroskyAdaptor("neurosky", "/dev/rfcomm0")
          neuro := neurosky.NewNeuroskyDriver(adaptor, "neuro")
        ...

          
%section.how-to#HowToUse
  %h2 How To Use
  %p This small program use the Neurosky.
  :markdown
        :::go
        package main

        import (
          "fmt"

          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot/platforms/neurosky"
        )

        func main() {
          gbot := gobot.NewGobot()

          adaptor := neurosky.NewNeuroskyAdaptor("neurosky", "/dev/rfcomm0")
          neuro := neurosky.NewNeuroskyDriver(adaptor, "neuro")

          work := func() {
            gobot.On(neuro.Event("extended"), func(data interface{}) {
              fmt.Println("Extended", data)
            })
            gobot.On(neuro.Event("signal"), func(data interface{}) {
              fmt.Println("Signal", data)
            })
            gobot.On(neuro.Event("attention"), func(data interface{}) {
              fmt.Println("Attention", data)
            })
            gobot.On(neuro.Event("meditation"), func(data interface{}) {
              fmt.Println("Meditation", data)
            })
            gobot.On(neuro.Event("blink"), func(data interface{}) {
              fmt.Println("Blink", data)
            })
            gobot.On(neuro.Event("wave"), func(data interface{}) {
              fmt.Println("Wave", data)
            })
            gobot.On(neuro.Event("eeg"), func(data interface{}) {
              eeg := data.(neurosky.EEG)
              fmt.Println("Delta", eeg.Delta)
              fmt.Println("Theta", eeg.Theta)
              fmt.Println("LoAlpha", eeg.LoAlpha)
              fmt.Println("HiAlpha", eeg.HiAlpha)
              fmt.Println("LoBeta", eeg.LoBeta)
              fmt.Println("HiBeta", eeg.HiBeta)
              fmt.Println("LoGamma", eeg.LoGamma)
              fmt.Println("MidGamma", eeg.MidGamma)
              fmt.Println("\n")
            })
          }

          robot := gobot.NewRobot("brainBot",
            []gobot.Connection{adaptor},
            []gobot.Device{neuro},
            work,
          )

          gbot.AddRobot(robot)
          gbot.Start()
        }

%section.public-methods
  .commands-api#Commands
    %h1 Functions
    %p no commands
  .commands-api#Events
    = partial "/documentation/drivers/partials/neurosky/events"
  
    
%section.compatibility.hardware#Compatability
  %h2 Compatibility
  =# TODO: Update platform list with all that work with this driver in gobot.
  .devices
    = partial "documentation/partials/devices_platforms"
