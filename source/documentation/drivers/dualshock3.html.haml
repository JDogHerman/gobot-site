---
page_title_show: true
title: Gobot - Dualshock3 Controller Driver
author: The Hybrid Group
page_title: Drivers
page_subtitle: Cylon has a extensible system for connecting to hardware devices.
page_title_docs: Dualshock3 Controller
page_subtitle_docs: Driver
layout: documentation
subnav_driver: true
active_menu_docs: true
subnavjs: true

joystick_platform: true
---
-content_for :js_accordeon do
  :javascript
    $("#driver-panel").addClass("active-panel");
    $("#joystick li:nth-child(1)").addClass("active-link");
    $(".accordion-docs dt:nth-child(9) a:nth-child(2) img").addClass("rotate");

%section.intro
  =image_tag "/images/devices/dualshock3.jpg", class: "display"
  .info-intro
    %p Allows user to interact with Artoo devices using a Dualshock3 game controller.
  .clear
  
%section.how_to#HowToConnect
  %h2 How To Connect
  :markdown
        :::go
        package main

        import (
            "fmt"
            "github.com/hybridgroup/gobot"
            "github.com/hybridgroup/gobot/platforms/joystick"
        )

        func main() {
            gbot := gobot.NewGobot()
            joystickAdaptor := joystick.NewJoystickAdaptor("ps3")
            joystickDriver := joystick.NewJoystickDriver(joystickAdaptor, "ps3", "./platforms/joystick/configs/dualshock3.json")
        ...

%section.how-to#HowToUse
  %h2 How To Use
  %h3 Example using Dualshock3 controller joystick and an Ardrone.
  :markdown
        :::go
        package main

        import (
            "fmt"

            "github.com/hybridgroup/gobot"
            "github.com/hybridgroup/gobot/platforms/joystick"
        )

        func main() {
            gbot := gobot.NewGobot()

            joystickAdaptor := joystick.NewJoystickAdaptor("ps3")
            joystick := joystick.NewJoystickDriver(joystickAdaptor,
                "ps3",
                "./platforms/joystick/configs/dualshock3.json",
            )

            work := func() {
                gobot.On(joystick.Event("square_press"), func(data interface{}) {
                    fmt.Println("square_press")
                })
                gobot.On(joystick.Event("square_release"), func(data interface{}) {
                    fmt.Println("square_release")
                })
                gobot.On(joystick.Event("triangle_press"), func(data interface{}) {
                    fmt.Println("triangle_press")
                })
                gobot.On(joystick.Event("triangle_release"), func(data interface{}) {
                    fmt.Println("triangle_release")
                })
                gobot.On(joystick.Event("left_x"), func(data interface{}) {
                    fmt.Println("left_x", data)
                })
                gobot.On(joystick.Event("left_y"), func(data interface{}) {
                    fmt.Println("left_y", data)
                })
                gobot.On(joystick.Event("right_x"), func(data interface{}) {
                    fmt.Println("right_x", data)
                })
                gobot.On(joystick.Event("right_y"), func(data interface{}) {
                    fmt.Println("right_y", data)
                })
            }

            robot := gobot.NewRobot("joystickBot",
                []gobot.Connection{joystickAdaptor},
                []gobot.Device{joystick},
                work,
            )

            gbot.AddRobot(robot)

            gbot.Start()
        }
        
%section.public-events
  .commands-api#Commands
    %h1 Functions
    %p No commands
  .commands-api#Events
    = partial "/documentation/drivers/partials/joystick/events_dualshock3"

  

%section.compatability.hardware#Compatability
  %h2 Compatibility
  .devices
    =# TODO: Update platform list at the top of the page.
    = partial "documentation/partials/devices_platforms"
