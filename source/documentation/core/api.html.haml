---
title: Gobot Core
author: The Hybrid Group
page_title: Core
page_subtitle: Components that make up Gobot's Core.
layout: documentation
page_title_show: true
active_menu_docs: true
---

.api
  %h1 API
  %p Gobot includes a RESTful API to query the status of any robot running within a group, including the connection and device status, and execute device commands.
  %p
    :markdown
      To activate the API, import the `github.com/hybridgroup/gobot/api` package and instantiate the `API` like this:

          :::go
          gbot := gobot.NewGobot()
          api.NewAPI(gbot).Start()

      You can also specify the api host and port, and turn on authentication:

          :::go
          gbot := gobot.NewGobot()
          server := api.NewAPI(gbot)
          server.Port = "3000"
          server.Username = "Gort"
          server.Password = "klaatu"
          server.Start()

  %p
    :markdown
      You may access the [robeaux](https://github.com/hybridgroup/robeaux) AngularJS interface with Gobot by navigating to `http://localhost:3000/`.

  %h3 Routes
  %p 
    :markdown
      The Gobot api conforms to the [cppp.io spec](https://github.com/hybridgroup/cppp-io/blob/master/specification.markdown).


  %h3  Example:
  %p 
    The following code example will spin up an API server with two custom commands
    and a middleware handler:

  :markdown
        :::go
        package main

        import (
          "fmt"
          "html"
          "net/http"

          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot/api"
        )

        func main() {
          gbot := gobot.NewGobot()

          a := api.NewAPI(gbot)
          a.AddHandler(func(w http.ResponseWriter, r *http.Request) {
            fmt.Fprintf(w, "Hello, %q \n", html.EscapeString(r.URL.Path))
          })
          a.Debug()
          a.Start()

          gbot.AddCommand("custom_gobot_command",
            func(params map[string]interface{}) interface{} {
              return "This command is attached to the mcp!"
            })

          hello := gbot.AddRobot(gobot.NewRobot("hello"))

          hello.AddCommand("hi_there", func(params map[string]interface{}) interface{} {
            return fmt.Sprintf("This command is attached to the robot %v", hello.Name)
          })

          gbot.Start()
        }

