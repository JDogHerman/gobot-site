---
hero: true
social: true
catcher: false

title: Gobot - Golang framework for robotics, physical computing, and the Internet of Things
author: The Hybrid Group
description: Gobot is a framework for robotics, physical computing, and the Internet of Things, written in the <span> Go programming language</span>.
layout: home

hero_title: "<span>Go, Robot, Go!</span> <br> Golang Powered Robotics"
hero_subtitle: "Next generation robotics framework with support for <a href='#platforms'>10 different platforms</a>"

img_character: "<img src='images/elements/gophy.png'>"

catcher_phrase: Ready to build the next big thing with Go?
getting_started_button: "<a href='/documentation/getting-started' class='cta'>Start Now</a>"
---
%section.the-code
  %h2.homepage  Meet The Code

  %p Gobot makes commanding robots incredibly simple and fun.

  %p All you need to get started is install the library with :
  :markdown
    `go get -u github.com/hybridgroup/gobot`.

  %h2.homepage  Gobot with Sphero
  :markdown
        :::go
        package main

        import (
          "fmt"
          "time"

          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot/platforms/sphero"
        )

        func main() {
          gbot := gobot.NewGobot()

          adaptor := sphero.NewSpheroAdaptor("Sphero", "/dev/rfcomm0")
          spheroDriver := sphero.NewSpheroDriver(adaptor, "sphero")

          work := func() {
            gobot.Every(3*time.Second, func() {
              spheroDriver.Roll(30, uint16(gobot.Rand(360)))
            })
          }

          robot := gobot.NewRobot("sphero",
            []gobot.Connection{adaptor},
            []gobot.Device{spheroDriver},
            work,
          )

          gbot.AddRobot(robot)

          gbot.Start()
        }

  %h2.homepage  Gobot with Arduino
  :markdown
        :::go
        package main

        import (
          "time"

          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot/platforms/firmata"
          "github.com/hybridgroup/gobot/platforms/gpio"
        )

        func main() {
          gbot := gobot.NewGobot()

          firmataAdaptor := firmata.NewFirmataAdaptor("arduino", "/dev/ttyACM0")
          led := gpio.NewLedDriver(firmataAdaptor, "led", "13")

          work := func() {
            gobot.Every(1*time.Second, func() {
              led.Toggle()
            })
          }

          robot := gobot.NewRobot("bot",
            []gobot.Connection{firmataAdaptor},
            []gobot.Device{led},
            work,
          )

          gbot.AddRobot(robot)

          gbot.Start()
        }
%section.gobot-platforms
  %h2#platforms.homepage Platform Support
  %p
    Gobot has a extensible system for connecting to hardware devices. The following robotics and physical computing platforms are currently supported:

    %h2.homepage.platforms
      10 Platforms

    %ul.homepage-platform
      %li
        .title
          = link_to "ARDrone", "http://ardrone2.parrot.com/", target:"_blank"
        %a{:href => "/documentation/platforms/ardrone"}
          %img{src: "/images/devices/ardrone.jpg", style: "width: 90%"}

      %li
        .title
          = link_to "Arduino", "http://www.arduino.cc/", target:"_blank"
        %a{:href => "/documentation/platforms/arduino"}
          %img{src: "/images/devices/arduino.jpg", style: "width: 90%"}

      %li
        .title
          = link_to "Beaglebone Black", "http://beagleboard.org/Products/BeagleBone+Black/", target:"_blank"
        %a{:href => "/documentation/platforms/beaglebone"}
          %img{src: "/images/devices/beaglebone.jpg", style: "width: 90%"}

      %li
        .title
          = link_to "Digispark", "http://digistump.com/category/1", target:"_blank"
        %a{:href => "/documentation/platforms/digispark"}
          %img{src: "/images/devices/digispark.jpg", style: "width: 90%"}

      %li
        .title
          = link_to "Joystick", "http://en.wikipedia.org/wiki/Joystick", target:"_blank"
        %a{:href => "/documentation/platforms/joystick"}
          %img{src: "/images/devices/joystick.jpg", style: "width: 90%"}

      %li
        .title
          = link_to "Leap Motion", "https://www.leapmotion.com/", target:"_blank"
        %a{:href => "/documentation/platforms/leapmotion"}
          %img{src: "/images/devices/leap_motion.jpg", style: "width: 90%"}

      %li
        .title
          = link_to "Neurosky", "http://neurosky.com/products-markets/eeg-biosensors/hardware/", target:"_blank"
        %a{:href => "/documentation/platforms/neurosky"}
          %img{src: "/images/devices/neurosky.jpg", style: "width: 90%"}

      %li
        .title
          = link_to "OpenCV", "http://opencv.org/", target:"_blank"
        %a{:href => "/documentation/platforms/opencv"}
          %img{src: "/images/devices/opencv.jpg", style: "width: 90%"}

      %li
        .title
          = link_to "Spark", "https://www.spark.io/", target:"_blank"
        %a{:href => "/documentation/platforms/spark"}
          %img{src: "/images/devices/spark.jpg", style: "width: 90%"}

      %li
        .title
          = link_to "Sphero", "http://www.gosphero.com/", target:"_blank"
        %a{:href => "/documentation/platforms/sphero"}
          %img{src: "/images/devices/sphero.jpg", style: "width: 90%"}
    .clear

  %p Support for many devices that use General Purpose Input/Output (GPIO) have a shared set of drivers provded using the gobot-gpio module:

  %h2.platforms
    = link_to "7 GPIO drivers", "https://en.wikipedia.org/wiki/General_Purpose_Input/Output" , target:"_blank"

  %ul.homepage-platform
    %li
      .title
        = link_to "Analog Sensor", "/documentation/drivers/analog-sensor"
      %a{:href => "/documentation/drivers/analog-sensor"}
        %img{src: "/images/devices/analog-sensor.jpg", style: "width: 90%"}
    %li
      .title
        = link_to "Button", "/documentation/drivers/button"
      %a{:href => "/documentation/drivers/button"}
        %img{src: "/images/devices/button.jpg", style: "width: 90%"}
    %li
      .title
        = link_to "Direct Pin", "/documentation/drivers/direct-pin"
      %a{:href => "/documentation/drivers/direct-pin"}
        %img{src: "/images/devices/direct-pin.jpg", style: "width: 90%"}
    %li
      .title
        = link_to "LED", "/documentation/drivers/led"
      %a{:href => "/documentation/drivers/led"}
        %img{src: "/images/devices/LED.jpg", style: "width: 90%"}
    %li
      .title
        = link_to "Makey Button", "/documentation/drivers/makey"
      %a{:href => "/documentation/drivers/makey"}
        %img{src: "/images/devices/makey.jpg", style: "width: 90%"}
    %li
      .title
        = link_to "Motor", "/documentation/drivers/motor"
      %a{:href => "/documentation/drivers/motor"}
        %img{src: "/images/devices/motor.jpg", style: "width: 90%"}
    %li
      .title
        = link_to "Servo", "/documentation/drivers/servo"
      %a{:href => "/documentation/drivers/servo"}
        %img{src: "/images/devices/servo.jpg", style: "width: 90%"}
  .clear

  %p Support for devices that use Inter-Integrated Circuit (I2C) have a shared set of drivers provded using the gobot-i2c module:

  %h2.platforms
    = link_to "3 I2C drivers", "https://en.wikipedia.org/wiki/I%C2%B2C", target:"_blank"
    


  %ul.homepage-platform
    %li
      .title
        = link_to "BlinkM", "/documentation/drivers/blinkm"
      %a{:href => "/documentation/drivers/blinkm"}
        %img{src: "/images/devices/blinkm.jpg", style: "width: 90%"}
    %li
      .title
        = link_to "HMC6352", "/documentation/drivers/hmc6352-compass"
      %a{:href => "/documentation/drivers/hmc6352-compass"}
        %img{src: "/images/devices/hmc6352-compass.jpg", style: "width: 90%"}
    %li
      .title
        = link_to "Wii Nunchuck", "/documentation/drivers/wiichuck"
      %a{:href => "/documentation/drivers/wiichuck"}
        %img{src: "/images/devices/wii-chuck.jpg", style: "width: 90%"}
  .clear

  %p.important-title
    See more drivers
    = link_to "here", "/documentation/drivers"

  %p More platforms and drivers are coming soon...

  %h2.homepage Getting Started

  :markdown
    Install the library with: `go get -u github.com/hybridgroup/gobot`
  :markdown
    Then install additional libraries for whatever hardware support you want to use from your robot. For example, `go get -u github.com/hybridgroup/gobot-sphero` to use Gobot with a Sphero.
  %p
    Ready to build Go robots with Gobot?
    =link_to "Get Started Here!", "", (menu_item("documentation/getting-started"))
%section.api
  %h2.homepage API
  %p Gobot includes a RESTful API to query the status of any robot running within a group, including the connection and device status, and execute device commands.

  :markdown
    To activate the API, use the `Api` command like this:

        :::go
        master := gobot.GobotMaster()
        gobot.Api(master)

    You can also specify the api host and port, and turn on authentication:

        :::go
        master := gobot.GobotMaster()
        api := gobot.Api(master)
        api.Port = "3000"
        api.Username = "Gort"
        api.Password = "klaatu"

  %p
    :markdown
      In order to use the
      [robeaux](https://github.com/hybridgroup/robeaux)
      AngularJS interface with Gobot you simply clone the robeaux repo and place it in the directory of your Gobot program. The robeaux assets must be in a folder called
      `robeaux`.

      Then visit `https://localhost:3000/#/robots` and you are ready to control your robots from a web browser!

      <img src="/images/screenshots/robeaux.png" style="margin-top: 15px; width: 100%">

      You can check out more information on the Gobot API in the docs [here][api-docs].

      [api-docs]: /documentation/guides/api/

%section.cli
  %h2.homepage CLI
  %script{type:"text/javascript", src:"https://asciinema.org/a/10306.js", id:"asciicast-10306", "data-autoplay" => "1",  "data-loop" => "true"}
  :markdown
    [Gort][] is a Command Line Toolkit (CLI) for RobotOps. Gort provides tools to scan for connected devices, upload firmware, and it works perfectly with Gobot. Also included with Gobot is a CLI for generating new robots and adaptors. 

    You can can learn more about Gobot's CLI in the docs [here][cli-docs].

    [Gort]: http://gort.io
    [cli-docs]: /documentation/guides/cli


  %h2.homepage Be Part Of The Robot Evolution
  :markdown
    - Code on Github:   [https://github.com/hybridgroup/gobot](https://github.com/hybridgroup/gobot)
    - Join us on IRC:   `#gobotio @ irc.freenode.net`
    - Join us on our [Trello Board](https://trello.com/b/kQPsldtk/gobot).