---
hero: true
social: true
catcher: false

title: Gobot - Golang framework for robotics, physical computing, and the Internet of Things
author: The Hybrid Group
description: Gobot is a framework for robotics, physical computing, and the Internet of Things, written in the <span> Go programming language</span>.
layout: home

hero_title: "<span>Go, Robot, Go!</span> <br> Golang Powered Robotics"
hero_subtitle: "Next generation robotics framework with support for <a href='#platforms'>15 different platforms</a>"

img_character: "<img src='images/elements/gophy.png'>"

catcher_phrase: Ready to build the next big thing with Go?
getting_started_button: "<a href='/documentation/getting-started' class='cta'>Start Now</a>"
---
%section.the-code
  %h2.homepage  Meet The Code

  %p Gobot makes commanding robots incredibly simple and fun.

  %p All you need to get started is install Gobot with :
  :markdown
    `go get -d -u github.com/hybridgroup/gobot/...`

  %h2.homepage The "Hello, World" Of Things
  %p 
  :markdown
    This program connects to an [Arduino](/documentation/platforms/arduino), and toggles an [led](/documentation/drivers/led) every one second.
  :markdown
        :::go
        package main

        import (
          "time"
          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot/platforms/firmata"
          "github.com/hybridgroup/gobot/platforms/gpio"
        )

        func main() {
          gbot := gobot.NewGobot()

          firmataAdaptor := firmata.NewFirmataAdaptor("arduino", "/dev/ttyACM0")
          led := gpio.NewLedDriver(firmataAdaptor, "led", "13")

          work := func() {
            gobot.Every(1*time.Second, func() {
              led.Toggle()
            })
          }

          gbot.AddRobot(gobot.NewRobot("bot",
            []gobot.Connection{firmataAdaptor},
            []gobot.Device{led},
            work,
          ))

          gbot.Start()
        }

  %h2.homepage Ready To Get Going?
  %p
  :markdown
    We've got lots more [examples](/documentation/examples) to help you 
    get started on your next hardware project!

%section.gobot-platforms
  %h2#platforms.homepage Platform Support
  %p
    Gobot has a extensible system for connecting to hardware devices. The following robotics and physical computing platforms are currently supported:

    %h2.homepage.platforms
      = "#{ data.platforms.length } Platforms"

    %ul.homepage-platform
      - data.platforms.each do |name, data|
        %li
          .title
            = link_to name, data.url, target:"_blank"
          %a{:href => "/documentation/platforms/#{data.slug}"}
            %img{src: "/images/devices/#{data.slug}.jpg", style: "width: 90%"}

    .clear

  %p Support for many devices that use General Purpose Input/Output (GPIO) have a shared set of drivers provded using the gobot-gpio module:

  %h2.platforms
    = link_to "#{data.drivers.GPIO.length} GPIO drivers", "https://en.wikipedia.org/wiki/General_Purpose_Input/Output" , target:"_blank"

  %ul.homepage-platform
    - data.drivers.GPIO.each do |name, slug|
      %li
        .title= link_to name, "/documentation/drivers/#{slug}"
        %a{:href => "/documentation/drivers/#{slug}"}
          %img{src: "/images/devices/#{slug}.jpg", style: "width: 90%"}
  .clear

  %p Support for devices that use Inter-Integrated Circuit (I2C) have a shared set of drivers provded using the gobot-i2c module:

  %h2.platforms
    = link_to "#{data.drivers.I2C.length} I2C drivers", "https://en.wikipedia.org/wiki/I%C2%B2C", target:"_blank"

  %ul.homepage-platform
    - data.drivers.I2C.each do |name, slug|
      %li
        .title= link_to name, "/documentation/drivers/#{slug}"
        %a{:href => "/documentation/drivers/#{slug}"}
          %img{src: "/images/devices/#{slug}.jpg", style: "width: 90%"}

%section.api
  %h2.homepage API
  %p 
    Gobot includes a 
    = link_to "cppp.io", "http://cppp.io", target: :blank  
    compliant RESTful API to query the status of any connection, device or
    robot running in your swarm. It additionally has the ability to issue 
    commands directly to your devices and robots.

  %p
    It also comes with the 
    = link_to "robeaux", "https://github.com/hybridgroup/robeaux", target: :blank  
    AngularJS interface baked right into it's API server for quick and easy
    configuration.

    <img src="/images/screenshots/robeaux.png" style="margin-top: 15px; width: 100%">

  %p
    You can check out more information on the Gobot API in the docs
    = link_to "here", "/documentation/core/api", target: :blank  


%section.cli
  %h2.homepage CLI
  %script{type:"text/javascript", src:"https://asciinema.org/a/10306.js", id:"asciicast-10306", "data-autoplay" => "1",  "data-loop" => "true"}
  :markdown
    Gobot is designed to be using in conjunction with [Gort][], a Command Line Toolkit (CLI) for RobotOps. Gort provides tools to scan for connected devices, upload firmware, and it works perfectly with Gobot. Also included with Gobot is a CLI for generating new robots and adaptors. 

    Gobot also has it own CLI which you can learn more about [here][cli-docs].

    [Gort]: http://gort.io
    [cli-docs]: /documentation/guides/cli


  %h2.homepage Be Part Of The Robot Evolution
  :markdown
    - Code on Github:   [https://github.com/hybridgroup/gobot](https://github.com/hybridgroup/gobot)
    - Join us on IRC:   `#gobotio @ irc.freenode.net`
