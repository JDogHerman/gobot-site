#!/usr/bin/env ruby

require 'bundler'
Bundler.setup

require 'git'
require 'fileutils'

REPO_URL = "https://github.com/hybridgroup/gobot.git"
REPO_PATH = File.expand_path(__dir__ + "/../.gobot")

def main
  clone_repo

  Dir.glob(REPO_PATH + "/platforms/*") do |path|
    name = File.basename path

    docs = extract_docs_from_dir path
    add_docs_to_site name, docs

    images = extract_breadboard_images_from_dir path
    add_breadboard_images_to_site name, images
  end
end

def clone_repo
  FileUtils.rm_rf(REPO_PATH) if File.directory?(REPO_PATH)
  puts " - Cloning repo. "
  repo = Git.clone REPO_URL, REPO_PATH
  repo.checkout 'dev'
end

def extract_docs_from_dir(path)
  docs = {}

  puts "  - Importing docs from #{File.basename(path)}"

  Dir.glob(path + "/docs/*.md") do |file|
    contents = File.read(file)
    filename = File.basename(file)
    docs[filename] = contents
    puts "    - #{filename}"
  end

  docs
end

def add_docs_to_site(platform, docs)
  return if docs == {}
  docs_path = File.expand_path("#{__dir__}/../source/documentation/drivers/partials/")
  docs_path += "/" + platform

  if File.directory?(docs_path)
    FileUtils.rm_rf docs_path + "/*.html.haml"
  else
    FileUtils.mkdir_p docs_path
  end

  docs.each do |name, content|
    filename = "_" + File.basename(name, ".md") + ".html.haml"
    path = File.join docs_path, filename

    content = content.force_encoding("UTF-8")

    # indent by two spaces
    content.gsub! /^(.+)/, '  \1'

    File.write path, ":markdown\n#{content}"
  end
end

def extract_breadboard_images_from_dir(path)
  puts "  - Importing breadboard images from #{File.basename(path)}"
  images = Dir.glob(path + "/docs/breadboards/*_bb.png")
  images.each { |image| puts "    - #{File.basename(image)}" }
  images
end

def add_breadboard_images_to_site(platform, images)
  return if images == []

  images_path = File.expand_path("#{__dir__}/../source/documentation/drivers/breadboards/")
  images_path += "/" + platform

  FileUtils.rm_rf images_path if File.directory?(images_path)
  FileUtils.mkdir_p images_path

  FileUtils.cp images, images_path
end

main
